(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> long() argument must be a string or a number, not 'Table'"
p3
sS'layer'
p4
S'C:\\Users\\Aurobindo\\Documents\\Fun Stuff\\web2py_win\\web2py\\applications\\Commune\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\ndef aevent():\n    things = db( db.sponsor, db.aevent).select(db.sponsor==db.aevent.sponsor)\n \n    return response.json(things)\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(aevent)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\Aurobindo\\Documents\\Fun Stuff\\web2py_win\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Aurobindo\\Documents\\Fun Stuff\\web2py_win\\web2py\\applications\\Commune\\controllers/default.py", line 65, in <module>\n  File "C:\\Users\\Aurobindo\\Documents\\Fun Stuff\\web2py_win\\web2py\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\Aurobindo\\Documents\\Fun Stuff\\web2py_win\\web2py\\applications\\Commune\\controllers/default.py", line 43, in aevent\n    things = db( db.sponsor, db.aevent).select(db.sponsor==db.aevent.sponsor)\n  File "C:\\Users\\Aurobindo\\Documents\\Fun Stuff\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "C:\\Users\\Aurobindo\\Documents\\Fun Stuff\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "C:\\Users\\Aurobindo\\Documents\\Fun Stuff\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "C:\\Users\\Aurobindo\\Documents\\Fun Stuff\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1105, in _select\n    self._colnames = list(map(colexpand, fields))\n  File "C:\\Users\\Aurobindo\\Documents\\Fun Stuff\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1104, in colexpand\n    return self.expand(field, colnames=True)\n  File "C:\\Users\\Aurobindo\\Documents\\Fun Stuff\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "C:\\Users\\Aurobindo\\Documents\\Fun Stuff\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "C:\\Users\\Aurobindo\\Documents\\Fun Stuff\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "C:\\Users\\Aurobindo\\Documents\\Fun Stuff\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1442, in represent\n    return str(long(obj))\nTypeError: long() argument must be a string or a number, not \'Table\'\n'
p11
s.